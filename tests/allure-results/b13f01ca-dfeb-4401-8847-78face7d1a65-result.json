{"name": "test_guid_generator", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n0   chromedriver                        0x00000001024eaa0c chromedriver + 4385292\n1   chromedriver                        0x00000001024e3318 chromedriver + 4354840\n2   chromedriver                        0x0000000102100b0c chromedriver + 281356\n3   chromedriver                        0x00000001020dbaf0 chromedriver + 129776\n4   chromedriver                        0x0000000102168314 chromedriver + 705300\n5   chromedriver                        0x000000010217b438 chromedriver + 783416\n6   chromedriver                        0x0000000102137eec chromedriver + 507628\n7   chromedriver                        0x00000001021388c4 chromedriver + 510148\n8   chromedriver                        0x00000001024b23c8 chromedriver + 4154312\n9   chromedriver                        0x00000001024b6e2c chromedriver + 4173356\n10  chromedriver                        0x0000000102497f84 chromedriver + 4046724\n11  chromedriver                        0x00000001024b7718 chromedriver + 4175640\n12  chromedriver                        0x000000010248af44 chromedriver + 3993412\n13  chromedriver                        0x00000001024d51a8 chromedriver + 4297128\n14  chromedriver                        0x00000001024d5324 chromedriver + 4297508\n15  chromedriver                        0x00000001024e2f10 chromedriver + 4353808\n16  libsystem_pthread.dylib             0x000000018a196f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x103ea0830>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/condition.py:174: in __call__\n    return self._fn(entity)\n../.venv/lib/python3.12/site-packages/selene/core/condition.py:144: in fn\n    actual = query(entity)\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../.venv/lib/python3.12/site-packages/selene/core/query.py:55: in <lambda>\n    text: Query[Element, str] = Query('text', lambda element: element().text)\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:192: in __call__\n    return self.locate()\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:185: in locate\n    return self._locator()\n../.venv/lib/python3.12/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n../.venv/lib/python3.12/site-packages/selene/core/_browser.py:71: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103e41460>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018a196f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001024eaa0c chromedriver + 4385292\nE       1   chromedriver                        0x00000001024e3318 chromedriver + 4354840\nE       2   chromedriver                        0x0000000102100b0c chromedriver + 281356\nE       3   chromedriver                        0x00000001020dbaf0 chromedriver + 129776\nE       4   chromedriver                        0x0000000102168314 chromedriver + 705300\nE       5   chromedriver                        0x000000010217b438 chromedriver + 783416\nE       6   chromedriver                        0x0000000102137eec chromedriver + 507628\nE       7   chromedriver                        0x00000001021388c4 chromedriver + 510148\nE       8   chromedriver                        0x00000001024b23c8 chromedriver + 4154312\nE       9   chromedriver                        0x00000001024b6e2c chromedriver + 4173356\nE       10  chromedriver                        0x0000000102497f84 chromedriver + 4046724\nE       11  chromedriver                        0x00000001024b7718 chromedriver + 4175640\nE       12  chromedriver                        0x000000010248af44 chromedriver + 3993412\nE       13  chromedriver                        0x00000001024d51a8 chromedriver + 4297128\nE       14  chromedriver                        0x00000001024d5324 chromedriver + 4297508\nE       15  chromedriver                        0x00000001024e2f10 chromedriver + 4353808\nE       16  libsystem_pthread.dylib             0x000000018a196f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_manager = None\n\n    def test_guid_generator(browser_manager):\n        page = TextInputPage()\n        page.open_textinput_page()\n>       page.check_new_name_of_button(\"Button That Should Change it's Name Based on Input Value\")\n\ntests.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/text_input.py:18: in check_new_name_of_button\n    self.browser.element('#updatingButton').should(have.text(value))\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:132: in should\n    self.wait.for_(condition)\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:148: in logic\n    raise self._hook_failure(failure)\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/core/configuration.py:1411: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)  # type: ignore\n../.venv/lib/python3.12/site-packages/selene/core/configuration.py:1238: in <lambda>\n    lambda config, path=None: fp.thread(  # type: ignore\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:83: in thread\n    return pipe(*functions)(arg)\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../.venv/lib/python3.12/site-packages/selene/core/configuration.py:1269: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:805: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103e41460>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018a196f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001024eaa0c chromedriver + 4385292\nE       1   chromedriver                        0x00000001024e3318 chromedriver + 4354840\nE       2   chromedriver                        0x0000000102100b0c chromedriver + 281356\nE       3   chromedriver                        0x00000001020dbaf0 chromedriver + 129776\nE       4   chromedriver                        0x0000000102168314 chromedriver + 705300\nE       5   chromedriver                        0x000000010217b438 chromedriver + 783416\nE       6   chromedriver                        0x0000000102137eec chromedriver + 507628\nE       7   chromedriver                        0x00000001021388c4 chromedriver + 510148\nE       8   chromedriver                        0x00000001024b23c8 chromedriver + 4154312\nE       9   chromedriver                        0x00000001024b6e2c chromedriver + 4173356\nE       10  chromedriver                        0x0000000102497f84 chromedriver + 4046724\nE       11  chromedriver                        0x00000001024b7718 chromedriver + 4175640\nE       12  chromedriver                        0x000000010248af44 chromedriver + 3993412\nE       13  chromedriver                        0x00000001024d51a8 chromedriver + 4297128\nE       14  chromedriver                        0x00000001024d5324 chromedriver + 4297508\nE       15  chromedriver                        0x00000001024e2f10 chromedriver + 4353808\nE       16  libsystem_pthread.dylib             0x000000018a196f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "start": 1722189945593, "stop": 1722189952088, "uuid": "56a19c5c-2c2e-443f-a649-abf7821573a5", "historyId": "ca4f69a7966e872b4c08751dd2c8ff36", "testCaseId": "ca4f69a7966e872b4c08751dd2c8ff36", "fullName": "tests.tests#test_guid_generator", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "tests"}, {"name": "host", "value": "EugeneE.local"}, {"name": "thread", "value": "74846-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests"}]}