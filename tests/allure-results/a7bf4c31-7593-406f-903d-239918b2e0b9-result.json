{"name": "test_guid_generator", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', 'bg-warning')).attribute src\n\nReason: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"bg-warning\"}\n  (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nScreenshot: file:///Users/tochka/.selene/screenshots/1722188200000/1722188200000.png\nPageSource: file:///Users/tochka/.selene/screenshots/1722188200000/1722188200000.html", "trace": "fn = <selene.core.wait.Query object at 0x10234eba0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../.venv/lib/python3.12/site-packages/selene/core/query.py:34: in fn\n    return element().get_attribute(name)\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:192: in __call__\n    return self.locate()\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:185: in locate\n    return self._locator()\n../.venv/lib/python3.12/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n../.venv/lib/python3.12/site-packages/selene/core/_browser.py:71: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10234e2a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...00018a196f94 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"bg-warning\"}\nE         (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100a02a0c chromedriver + 4385292\nE       1   chromedriver                        0x00000001009fb318 chromedriver + 4354840\nE       2   chromedriver                        0x0000000100618b0c chromedriver + 281356\nE       3   chromedriver                        0x000000010065b2f8 chromedriver + 553720\nE       4   chromedriver                        0x0000000100693d24 chromedriver + 785700\nE       5   chromedriver                        0x000000010064feec chromedriver + 507628\nE       6   chromedriver                        0x00000001006508c4 chromedriver + 510148\nE       7   chromedriver                        0x00000001009ca3c8 chromedriver + 4154312\nE       8   chromedriver                        0x00000001009cee2c chromedriver + 4173356\nE       9   chromedriver                        0x00000001009aff84 chromedriver + 4046724\nE       10  chromedriver                        0x00000001009cf718 chromedriver + 4175640\nE       11  chromedriver                        0x00000001009a2f44 chromedriver + 3993412\nE       12  chromedriver                        0x00000001009ed1a8 chromedriver + 4297128\nE       13  chromedriver                        0x00000001009ed324 chromedriver + 4297508\nE       14  chromedriver                        0x00000001009faf10 chromedriver + 4353808\nE       15  libsystem_pthread.dylib             0x000000018a196f94 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x000000018a191d34 thread_start + 8\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_manager = None\n\n    def test_guid_generator(browser_manager):\n        page = DynamicTablePage()\n        page.open_dynamictable_page()\n>       s = page.take_value_of_cpu_load()\n\ntests.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/dynamic_table.py:13: in take_value_of_cpu_load\n    value = self.browser.element('bg-warning').get(query.attribute('src'))\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:121: in get\n    return self.wait.for_(query)\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Query object at 0x10234eba0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', 'bg-warning')).attribute src\nE                   \nE                   Reason: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"bg-warning\"}\nE                     (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE                   Screenshot: file:///Users/tochka/.selene/screenshots/1722188200000/1722188200000.png\nE                   PageSource: file:///Users/tochka/.selene/screenshots/1722188200000/1722188200000.html\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:148: TimeoutException"}, "start": 1722188202149, "stop": 1722188218752, "uuid": "49d15c52-6c35-412b-b454-f56ac2f92d10", "historyId": "ca4f69a7966e872b4c08751dd2c8ff36", "testCaseId": "ca4f69a7966e872b4c08751dd2c8ff36", "fullName": "tests.tests#test_guid_generator", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "tests"}, {"name": "host", "value": "EugeneE.local"}, {"name": "thread", "value": "73369-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests"}]}