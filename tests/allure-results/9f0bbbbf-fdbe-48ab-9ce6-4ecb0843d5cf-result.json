{"name": "test_sampleapp_test", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.has url 'http://uitestingplayground.com/sampleapp'\n\nReason: AssertionError: actual url: http://uitestingplayground.com//sampleapp\nScreenshot: file:///Users/tochka/.selene/screenshots/1722176239014/1722176239014.png\nPageSource: file:///Users/tochka/.selene/screenshots/1722176239014/1722176239014.html", "trace": "fn = <selene.core.conditions.BrowserCondition object at 0x1043c4ce0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.core._browser.Browser object at 0x104346750>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual url: http://uitestingplayground.com//sampleapp\n\n../.venv/lib/python3.12/site-packages/selene/core/condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_sampleapp_test():\n        page.open_sampleapp_page()\n>       browser.should(have.url(\"http://uitestingplayground.com/sampleapp\"))\n\ntests.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/entity.py:132: in should\n    self.wait.for_(condition)\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.conditions.BrowserCondition object at 0x1043c4ce0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.has url 'http://uitestingplayground.com/sampleapp'\nE                   \nE                   Reason: AssertionError: actual url: http://uitestingplayground.com//sampleapp\nE                   Screenshot: file:///Users/tochka/.selene/screenshots/1722176239014/1722176239014.png\nE                   PageSource: file:///Users/tochka/.selene/screenshots/1722176239014/1722176239014.html\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:148: TimeoutException"}, "start": 1722176241547, "stop": 1722176258049, "uuid": "1d3e3514-70cc-4bb0-b773-4165a622e49b", "historyId": "42283462eed3952a980b1829ed809651", "testCaseId": "42283462eed3952a980b1829ed809651", "fullName": "tests.tests#test_sampleapp_test", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "tests"}, {"name": "host", "value": "EugeneE.local"}, {"name": "thread", "value": "66739-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests"}]}